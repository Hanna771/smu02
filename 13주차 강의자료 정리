## 🧑‍💻 13주차 - GitHub 연동, 인증, Git Flow

> GitHub 연동 시 토큰 인증 문제 해결, 저장소 생성 방법, Git Flow 전략까지 실무에 필요한 흐름을 정리했습니다.

---

### 🔐 13.1 - GitHub 토큰 인증 에러 해결

#### ❌ 오류 상황
```
remote: Support for password authentication was removed on August 13, 2021.
fatal: Authentication failed for 'https://github.com/사용자이름/저장소명.git/'
```

#### ✅ 해결 방법 (토큰 발급)

1. GitHub 우측 상단 → `Settings`
2. 좌측 메뉴에서 `Developer settings`
3. `Personal access tokens` → `Tokens (classic)`
4. `Generate new token (classic)` 클릭
5. **Scope 선택**: `repo`, `workflow` 등 체크
6. 토큰 복사 (다시 확인 불가하므로 저장!)

#### 🔐 사용 예시 (토큰 입력)

```bash
$ git push origin main
Username: yourGitHubID
Password: 발급받은_토큰값
```

---

### 📁 13.2 - GitHub Repository 생성 방법

#### 💻 GitHub에서 저장소 생성

1. GitHub 접속 → 우측 상단 `+` → `New repository`
2. `Repository name` 입력
3. `Public` or `Private` 선택
4. `.gitignore`, License 설정 가능
5. `Create repository` 클릭

#### 🧭 GitHub 저장소 연결 (터미널에서)

```bash
$ git init
$ git remote add origin https://github.com/사용자이름/저장소명.git
$ git branch -M main
$ git push -u origin main
```

---

### 🔄 13.3 - Git Flow 전략 (브랜치 전략)

#### 📌 Git Flow 구조

```
main        : 실제 배포 코드 (release 완료 버전)
develop     : 개발 버전 통합
feature/*   : 기능 개발용 브랜치
release/*   : 배포 준비 브랜치
hotfix/*    : 긴급 수정 브랜치
```

#### 🔧 브랜치 생성 예시

```bash
# 기본 개발 브랜치 생성
$ git checkout -b develop

# 기능 개발 브랜치
$ git checkout -b feature/login

# 배포 브랜치
$ git checkout -b release/v1.0

# 핫픽스 브랜치
$ git checkout -b hotfix/error-fix
```

#### 🔁 병합 흐름 예시

```bash
# 기능 완료 시
$ git checkout develop
$ git merge feature/login

# 배포 준비 시
$ git checkout main
$ git merge release/v1.0
```

---

> ✅ 이번 주차에서는 GitHub 인증 토큰 발급부터 저장소 생성,  
> 그리고 Git Flow 전략까지 실제 실무에서 사용되는 브랜치 전략을 익혔습니다.
