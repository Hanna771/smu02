# 📘 Git & Vim 강의 정리

> 이 문서는 교수님 강의자료를 바탕으로 정리된 학습노트입니다.  
> Markdown 문법으로 작성되어 GitHub에서도 읽기 쉽도록 구성되어 있으며, 각 주차별 실습 내용과 개념을 포괄적으로 정리하였습니다.

---

## 🔖 7주차 - vi(Vim) Editor 명령어 정리

### 📂 vi 시작 명령어

- `vi {파일명}`: 새 파일 생성 또는 기존 파일 열기
- `vi +{행번호} {파일명}`: 특정 행으로 이동하며 열기
- `view {파일명}`: 읽기 전용으로 열기
- `vi -r {파일명}`: 손상된 파일 회복

---

### ⌨️ 커서 이동 단축키

| 키              | 설명                                 |
|----------------|--------------------------------------|
| h, j, k, l      | ← ↓ ↑ → 방향으로 커서 이동              |
| w / b / e       | 단어 기준: 다음 / 이전 / 끝으로 이동     |
| 0 / ^ / $       | 행 처음 / 행 맨 처음 / 행 끝으로 이동    |
| Enter / Backspace | 다음 줄 / 이전 문자로 이동             |
| Ctrl + f / b    | 한 화면 아래 / 위로 이동                |
| Ctrl + d / u    | 반 페이지 아래 / 위로 이동              |
| Ctrl + y / e    | 한 줄 위 / 아래로 이동                  |

---

### 📝 입력/수정 모드 명령어

- `i`, `I` : 현재 위치 or 줄 맨 앞에서 입력
- `a`, `A` : 현재 위치 다음 or 줄 끝에서 입력
- `o`, `O` : 아래 or 위에 새로운 줄 생성 후 입력
- `cw`, `cc`, `C` : 단어 or 줄 전체 변경
- `s`, `S` : 문자 or 줄 전체 대체
- `ESC`: 입력모드 종료

---

### 🧹 삭제 명령어

| 명령어    | 설명                        |
|----------|-----------------------------|
| `x`, `nx` | 문자 삭제 (n개까지)         |
| `dw`, `#dw` | 단어 삭제 (#은 개수)      |
| `dd`, `ndd` | 줄 삭제 (n줄까지)         |
| `db`, `D`   | 단어 뒤로 삭제 / 커서 오른쪽 줄 삭제 |

---

### 📋 복사 & 붙여넣기

| 명령어 | 설명                                  |
|--------|---------------------------------------|
| `yy`, `ndd` | 줄 복사 (n줄까지)                  |
| `p`, `P`     | 붙여넣기 (현재 줄 아래 / 위에 삽입) |
| `v` + `y`    | 비쥬얼 모드로 블럭 복사           |

---

### 🔍 탐색 및 치환

- `/문자열`, `?문자열`: 아래 / 위 방향으로 검색
- `n`, `N`: 다음 / 이전 검색 결과로 이동
- `:%s/old/new/g`: 전체에서 old를 new로 바꾸기

---

### 💾 저장 & 종료 명령어

| 명령어       | 설명                     |
|-------------|--------------------------|
| `:w`        | 저장                     |
| `:q`, `:q!` | 종료 / 강제 종료         |
| `:wq`, `ZZ` | 저장 후 종료             |
| `:e 파일명` | 다른 파일 열기           |

## 🔖 7주차 - Git 기초 개념 및 로컬 작업 흐름

### 🔧 Git이란?

- **버전 관리 도구**: 협업과 이력 관리를 위한 필수 툴
- 리누스 토발즈가 개발한 **분산 버전 관리 시스템**

### 🌱 Git 기본 설치 & 설정

```bash
$ git --version  # 버전 확인
$ git config --global user.name "홍길동"
$ git config --global user.email "hong@example.com"
```

### 📁 Git 저장소 초기화

```bash
$ mkdir GitTest
$ cd GitTest
$ git init
```

### 📌 Git 파일 상태 흐름

```
Untracked → Tracked → Staged → Committed
```

| 상태       | 의미                                   |
|------------|----------------------------------------|
| Untracked  | Git이 관리하지 않는 새 파일             |
| Tracked    | Git이 이미 관리 중인 파일               |
| Modified   | 수정되었지만 아직 add 안 된 파일        |
| Staged     | 커밋될 준비가 완료된 상태               |
| Committed  | 로컬 저장소에 기록된 상태               |

```bash
$ git status               # 현재 파일 상태 확인
$ git add 파일명           # Staging 영역에 추가
$ git commit -m "메시지"   # 커밋
```

---

### 🧼 .gitignore 설정 예시

```bash
*.log
*.tmp
.env
node_modules/
build/
```

- 추적하지 않을 파일은 `.gitignore` 파일에 적기
- 참고 링크: [https://www.toptal.com/developers/gitignore](https://www.toptal.com/developers/gitignore)

---

### 🔍 커밋 히스토리 확인

```bash
$ git log                       # 전체 커밋 히스토리
$ git log --oneline             # 간단한 로그
$ git log --graph --decorate    # 브랜치 구조 시각화
```

## 🔖 7주차 - Ubuntu에서 Git 사용하기

### 💻 설치 및 사용자 정보 설정

```bash
$ sudo apt update
$ sudo apt install git
$ git config --global user.name "홍길동"
$ git config --global user.email "hong@example.com"
```

### 📁 Git 저장소 생성 & 첫 커밋

```bash
$ mkdir git-test
$ cd git-test
$ git init
$ touch README.md
$ git add README.md
$ git commit -m "first commit"
```

---

### ⚙️ Git 상태 확인 및 히스토리 명령어

- `git status`: 현재 상태 확인
- `git diff`: 변경된 파일의 차이 확인
- `git log`: 커밋 기록 확인

---

### 🚫 .gitignore 설정 방법

```gitignore
*.a
!lib.a
/TODO
build/
doc/**/*.txt
```

- 자동 생성기는 👉 [gitignore.io](https://www.toptal.com/developers/gitignore) 추천

---

## 🔖 7주차 - Git Branch & 병합

### 🌿 Git 브랜치란?

- 브랜치는 **코드의 분기점**을 만들어 실험과 병렬 작업 가능
- Git의 브랜치는 **가볍고 빠르며**, 수시로 만들고 삭제해도 부담 없음

---

### 🔧 브랜치 생성 / 이동 / 병합

```bash
$ git branch               # 브랜치 목록 확인
$ git branch dev           # 새 브랜치 생성
$ git checkout dev         # 브랜치 이동
$ git checkout -b dev      # 생성과 이동 동시에
```

```bash
$ git checkout main
$ git merge dev            # dev 브랜치를 main에 병합
```

---

### ⚠️ 병합 충돌(Merge Conflict)

- 같은 파일의 같은 위치를 두 브랜치가 수정 → 충돌 발생

```text
<<<<<<< HEAD
기존 브랜치의 코드
=======
다른 브랜치의 코드
>>>>>>> dev
```

✅ 해결 방법:
1. 충돌 난 부분 수동으로 수정
2. 저장 후 `git add`, `git commit`

---

### 🧹 브랜치 정리 명령어

```bash
$ git branch --merged        # 병합된 브랜치 목록
$ git branch -d 브랜치명      # 병합된 브랜치 삭제
$ git branch -D 브랜치명      # 병합 여부와 상관없이 강제 삭제
```
